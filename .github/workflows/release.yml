name: Build and Release

on:
  push:
    branches:
      - master
      - github-actions-integration

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .github/workflows/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Create output directories
        run: mkdir -p dist

      - name: Build client binary
        run: docker run --rm -v ${{ github.workspace }}:/app ghcr.io/${{ github.repository }}/py-client-server-test-task:latest pyinstaller --onefile client.py

      - name: Build server binary
        run: docker run --rm -v ${{ github.workspace }}:/app ghcr.io/${{ github.repository }}/py-client-server-test-task:latest pyinstaller --onefile server.py

      - name: Upload release assets
        id: upload-release
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: |
            dist/client
            dist/server

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: dist

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload client binary to release
        id: upload_client_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/client
          asset_name: client
          asset_content_type: application/octet-stream

      - name: Upload server binary to release
        id: upload_server_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/server
          asset_name: server
          asset_content_type: application/octet-stream
